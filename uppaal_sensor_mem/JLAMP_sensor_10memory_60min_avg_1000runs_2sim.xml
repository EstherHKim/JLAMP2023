<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Global time. One time unit in Uppaal represents 1 minute
const int m = 1; // 1 minute = 1 time unit
const int h = 60*m; // 1 hour = 60 minutes
clock t; // global time [min]

// Urban catchment
const double UC_k = 0.25; // Urban surface resevoir reaction factor [cm/min * 1 / cm]
const double A_UC = 37.0 * 10000.0 * 10000.0; // urban area catchment [cm2], 1 ha = 10000 m2, 1 m2 = 10000 cm2 = [cm/(min*cm)]
double rain = 0.0; // Rainfall [cm/min]
clock S_UC = 0.0; // Water surface height urban catchment [cm]

// Rain detention pond
const int W = 300; // max water height [cm]
clock w = 100.0; // water level in pond [cm]
double Qout = 0.0; // pond outflow [cm3/min], will be properly initialized in Controller
clock o = 0.0; // accumelated overflow time [min]

// sensor 
double sensor_w = 100.0; // water level in pond [cm]
double sensor_mem_avg = 0.0;

// Cost function
clock c = 0.0; // cost function [-]





</declaration>
	<template>
		<name>Rain</name>
		<declaration>const int I = 6; // number of intervals. Simulation should finish before the last period is over. Therefore, last period is a large dummy period.
int i = 0; // current interval index

// Exact values =&gt; const int dryL[I] = {233*m, 71*m, 1529*m, 187*m, 226*m, 24*h};
//const int dryL[I] = {210*m, 64*m, 1376*m, 168*m, 203*m, 24*h}; // lower bound duration dry period [min]
const int dryL[I] = {255*m, 77*m, 1681*m, 205*m, 248*m, 24*h}; // upper bound duration dry period [min]
const int dryU[I] = {256*m, 78*m, 1682*m, 206*m, 249*m, 24*h}; // upper bound duration dry period [min]

// Exact values =&gt; const int rainL[I] = {30*m, 23*m, 55*m, 26*m, 231*m, 24*h};
//const int rainL[I] = {27*m, 21*m, 49*m, 23*m, 208*m, 24*h}; // lower bound duration raining period [min]
const int rainL[I] = {32*m, 24*m, 60*m, 28*m, 253*m, 24*h}; // lower bound duration raining period [min]
const int rainU[I] = {33*m, 25*m, 61*m, 29*m, 254*m, 24*h}; // upper bound duration raining period [min]

const double rainmax[I] = {0.01333, 0.03478, 0.02545, 0.02308, 0.00952, 0.0}; // rain intensity [cm/min], 1 mm/min = 0.1 cm/min

clock d = 0.0; // duration of dry or raining period [min]
const double e = 0.1; // rain uncertainty factor.

// Returns a sample from a uniform distribution between lower and upper.
double uniform(double lower, double upper)
{
    double distance = upper - lower;
    double sample = random(distance);
    return lower + sample;
}
</declaration>
		<location id="id0" x="-85" y="-8">
			<name x="-136" y="-17">Dry</name>
			<label kind="invariant" x="-153" y="8">d &lt;= dryU[i]</label>
		</location>
		<location id="id1" x="85" y="-8">
			<name x="102" y="-25">Raining</name>
			<label kind="invariant" x="93" y="0">d &lt;= rainU[i]</label>
		</location>
		<init ref="id0"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-51" y="34">d &gt;= rainL[i]</label>
			<label kind="assignment" x="-51" y="51">d = 0,
i++,
rain = 0.0</label>
			<nail x="60" y="34"/>
			<nail x="-59" y="34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-51" y="-110">d &gt;= dryL[i]</label>
			<label kind="assignment" x="-51" y="-93">d = 0,
rain = rainmax[i]</label>
			<nail x="-68" y="-51"/>
			<nail x="68" y="-51"/>
		</transition>
	</template>
	<template>
		<name>Pond</name>
		<declaration>// We assume as pond geometry an inverted pyramid with square base, where the base is the surface of the permanent water level. 
// H represents the height of the pyramid, L represents the area of the pyramid.
const double H = 1000000.0; // pond geometry H [cm]
const double L = 7464.5; // pond geometry L [cm], 7464.5 -&gt; 5572 m2 area

// Flow from urban catchment to pond. Eq. 2 in paper.
double Qin()
{
    return S_UC * UC_k * A_UC;
}

// Dynamics of the water level. Eqs. 4 and 5 in the paper combined.
double pond_dynamics()
{
    if (w &lt;= 0 &amp;&amp; Qin() &lt;= Qout) return 0;

    else if (w &gt;= W &amp;&amp; Qin() &gt;= Qout) return 0; 

    else return H*H/(L*L)/((w+H)*(w+H))*(Qin()-Qout);
}

// Cummulative overflow duration. Eq. 6 in the paper.
double overflow()
{
    const double epsilon = 0.1; // for numerical precision 
    if (w &gt;= W - epsilon) return 1.0;
    
    else return 0.0;
}</declaration>
		<location id="id4" x="0" y="0">
			<label kind="invariant" x="-76" y="17">w' == pond_dynamics() &amp;&amp;
o' == overflow()</label>
		</location>
		<init ref="id4"/>
	</template>
	<template>
		<name>CostFunction</name>
		<location id="id5" x="0" y="0">
			<label kind="invariant" x="-110" y="17">c' == 1 - w / W</label>
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>UrbanCatchment</name>
		<location id="id6" x="0" y="0">
			<label kind="invariant" x="-85" y="17">S_UC' == rain - (S_UC * UC_k)</label>
		</location>
		<init ref="id6"/>
	</template>
	<template>
		<name>Controller</name>
		<declaration>const int P = h; // control switching period [min]
const double Qomax = 60.0 * 95000.0; // max outflow [cm3/min], 95000 cm3/s = 95 l/s
const int C = 3; // number of control modes
const double Qoutv[C] = {(1.0/6.0)*Qomax, (2.0/3.0)*Qomax, (3.0/3.0)*Qomax}; // outflow modes

clock x = 0.0; // control switching clock</declaration>
		<location id="id7" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x &lt;= P</label>
		</location>
		<location id="id8" x="-178" y="0">
			<urgent/>
		</location>
		<location id="id9" x="102" y="0">
			<urgent/>
		</location>
		<init ref="id8"/>
		<transition id="id10">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="select" x="17" y="-102">i:int[0,C-1]</label>
			<label kind="assignment" x="0" y="-85">x = 0, Qout = Qoutv[i]</label>
			<nail x="102" y="-59"/>
			<nail x="0" y="-59"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="34" y="8">x==P</label>
		</transition>
		<transition id="id12">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="select" x="-127" y="-17">i:int[0,C-1]</label>
			<label kind="assignment" x="-144" y="0">Qout=Qoutv[i]</label>
		</transition>
	</template>
	<template>
		<name>SensorGaussian</name>
		<parameter>const double std</parameter>
		<declaration>clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval is set as 10 [min]

const int L = 10; // size of sensor reading for partial observation - 10 windows
const int L2 = 6*24*3+10; // size of sensor reading for partial observation - 10 windows
double po_list[L];
double full_list[L2];

int [0,L] len;  
int [0,L2] temp; 

//........................
// sensor reading 
//........................

// Remove the front element of the po_list. It can hold only 5 elements in case of L1 applied. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;L-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    //if (len &lt; L)
    if (temp%6 == 0 &amp;&amp; len &lt; L)    
    {po_list[len] = element; len++; }
    else
    {delist(element);}
}

// Put a new element at the end of the list. 
void fulllist(double element)
{
   full_list[temp] = element; 
   
}

// noise function - Gaussian distribution  
double ave()
{
    int i=0;
    double summ=0.0;
    double avgg=0.0;

    if (len&gt;0)
    {    
        for (i=0; i&lt;len; i++)
        {
            summ = summ + po_list[i];
        }
        avgg = summ/len;
    }
    else 
        avgg = po_list[0];
 
    return avgg;     
}

//-------------------------------------
//Generating noise with Gaussian Distribution
//-------------------------------------

double a = 0.0; // sensor uncertainty factor.


// noise function - Gaussian distribution  
double gau(double std)
{
    return random_normal(0, std); 
    //return sample; 
}
</declaration>
		<location id="id13" x="-416" y="-161">
			<name x="-450" y="-195">SensorOFF</name>
			<urgent/>
		</location>
		<location id="id14" x="-229" y="-161">
			<name x="-255" y="-212">SensorON</name>
			<label kind="invariant" x="-255" y="-195">x&lt;=(S+1)</label>
		</location>
		<location id="id15" x="-34" y="-161">
			<name x="-44" y="-195">SensorDetect</name>
			<committed/>
		</location>
		<location id="id16" x="-34" y="-34">
			<committed/>
		</location>
		<init ref="id13"/>
		<transition id="id17" controllable="false">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-161" y="-136">temp%6 != 0</label>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-229" y="-25">temp%6 == 0</label>
			<label kind="assignment" x="-229" y="-8">enlist(sensor_w),
sensor_mem_avg = ave()</label>
			<nail x="-229" y="-34"/>
		</transition>
		<transition id="id19" controllable="false">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="assignment" x="-25" y="-144">sensor_w = w + gau(std),
//fulllist(sensor_w),
temp++,
x = 0</label>
		</transition>
		<transition id="id20" controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-170" y="-187">x&gt;=S</label>
		</transition>
		<transition id="id21" controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="assignment" x="-348" y="-153">len=0,
temp=0,
x=0</label>
		</transition>
	</template>
	<template>
		<name>Cost</name>
		<location id="id22" x="0" y="0">
			<label kind="invariant" x="-110" y="17">c' == 100*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id22"/>
	</template>
	<system>
Sensor = SensorGaussian(15.0);
system Pond, Rain, Controller, CostFunction, UrbanCatchment,Cost,Sensor;
</system>
	<queries>
		<option key="--total-runs" value="1000"/>
		<option key="--discretization" value="0.1"/>
		<option key="--max-iterations" value="100"/>
		<option key="--good-runs" value="1000"/>
		<option key="--eval-runs" value="100"/>
		<option key="--runs-pr-state" value="1000"/>
		<option key="--max-imitation" value="10"/>
		<query>
			<formula>// Random control (std=15 used for generating sensor noise)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;1] {w, sensor_w}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;1] {rain}</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>// Optimal control (std=15 used for generating sensor noise)</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy opt_std15_10mem_60min = minE (c) [&lt;=72*h]{}-&gt;{rain, sensor_mem_avg}: &lt;&gt; (t==72*h)</formula>
			<comment>Expected running time: 00

**Learning parameters: 
successful runs: 1000 
maximum runs: 1000 
good runs: 1000 
runs to evaluate: 10 
total maximal number of iternations: 100
limitation iterations: 5

**Statistical parameters: 
Discretization step for hybrid systems:  0.1

</comment>
		</query>
		<query>
			<formula>saveStrategy("C:\Users\sj81ko\Desktop\Project\paper_partial observation\uppaal\uppaal_sensor_mem\sensor_60min\strategy_sensor_10memory_60min_avg_1000runs_2sim.json", opt_std15_10mem_60min)</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 10000] (max:o) under opt_std15_10mem_60min</formula>
			<comment>Should be 0, as we synthesized a strategy with guarantees on this variable.
Set in options -&gt; statistical parameters the 'discretization step for hybrid systems' to 
0.5 to speed up calculation.</comment>
		</query>
		<query>
			<formula>E[&lt;=72*h; 10000] (max:c) under opt_std15_10mem_60min</formula>
			<comment>Approximately 2480.
Set in options -&gt; statistical parameters the 'discretization step for hybrid systems' to 
0.5 to speed up calculation.</comment>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;5] {w} under opt_std15_10mem_60min</formula>
			<comment>Set in options -&gt; statistical parameters the 'discretization step for hybrid systems' to 
0.5 to speed up calculation.</comment>
		</query>
	</queries>
</nta>
