<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Global time. One time unit in Uppaal represents 1 minute
const int m = 1; // 1 minute = 1 time unit
const int h = 60*m; // 1 hour = 60 minutes
clock t; // global time [min]

// Urban catchment
const double UC_k = 0.25; // Urban surface resevoir reaction factor [cm/min * 1 / cm]
const double A_UC = 37.0 * 10000.0 * 10000.0; // urban area catchment [cm2], 1 ha = 10000 m2, 1 m2 = 10000 cm2 = [cm/(min*cm)]
double rain = 0.0; // Rainfall [cm/min]
clock S_UC = 0.0; // Water surface height urban catchment [cm]

// Rain detention pond
const int W = 300; // max water height [cm]
clock w = 100.0; // water level in pond [cm]
double Qout = 0.0; // pond outflow [cm3/min], will be properly initialized in Controller
clock o = 0.0; // accumelated overflow time [min]

// Cost function
//clock c = 0.0; // cost function [-]

//.....................
// Esther 
//.....................

const int A = 8;

// Sensor for reading pond's water height with uniform distribution 
double w_ud = 0.0;
//double w_ud[A];
//double w_udpo[A];

// Sensor for reading pond's water height with normal distribution 
double sensor_w = 0.0;
//double w_gd[A];
//double w_gdpo[A];

// Cost function
clock c = 0.0; // cost function [-]
clock sensor_c = 0.0; // cost function [-]

// Rain detention pond
//const int WR = 300 * 0.9; // max water height [cm]</declaration>
	<template>
		<name>Rain</name>
		<declaration>
const int I = 6; // number of intervals. Simulation should finish before the last period is over. Therefore, last period is a large dummy period.
int i = 0; // current interval index

// Exact values =&gt; const int dryL[I] = {233*m, 71*m, 1529*m, 187*m, 226*m, 24*h};
//const int dryL[I] = {210*m, 64*m, 1376*m, 168*m, 203*m, 24*h}; // lower bound duration dry period [min]
const int dryL[I] = {255*m, 77*m, 1681*m, 205*m, 248*m, 24*h}; // upper bound duration dry period [min]
const int dryU[I] = {256*m, 78*m, 1682*m, 206*m, 249*m, 24*h}; // upper bound duration dry period [min]

// Exact values =&gt; const int rainL[I] = {30*m, 23*m, 55*m, 26*m, 231*m, 24*h};
//const int rainL[I] = {27*m, 21*m, 49*m, 23*m, 208*m, 24*h}; // lower bound duration raining period [min]
const int rainL[I] = {32*m, 24*m, 60*m, 28*m, 253*m, 24*h}; // lower bound duration raining period [min]
const int rainU[I] = {33*m, 25*m, 61*m, 29*m, 254*m, 24*h}; // upper bound duration raining period [min]

const double rainmax[I] = {0.01333, 0.03478, 0.02545, 0.02308, 0.00952, 0.0}; // rain intensity [cm/min], 1 mm/min = 0.1 cm/min

clock d = 0.0; // duration of dry or raining period [min]
const double e = 0.1; // rain uncertainty factor.

</declaration>
		<location id="id0" x="-85" y="-8">
			<name x="-136" y="-17">Dry</name>
			<label kind="invariant" x="-153" y="8">d &lt;= dryU[i]</label>
		</location>
		<location id="id1" x="85" y="-8">
			<name x="102" y="-25">Raining</name>
			<label kind="invariant" x="93" y="0">d &lt;= rainU[i]</label>
		</location>
		<init ref="id0"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-51" y="34">d &gt;= rainL[i]</label>
			<label kind="assignment" x="-51" y="51">d = 0,
i++,
rain = 0.0</label>
			<nail x="60" y="34"/>
			<nail x="-59" y="34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-51" y="-110">d &gt;= dryL[i]</label>
			<label kind="assignment" x="-51" y="-93">d = 0,
rain = rainmax[i]</label>
			<nail x="-68" y="-51"/>
			<nail x="68" y="-51"/>
		</transition>
	</template>
	<template>
		<name>UrbanCatchment</name>
		<location id="id4" x="0" y="0">
			<label kind="invariant" x="-85" y="17">S_UC' == rain - (S_UC * UC_k)</label>
		</location>
		<init ref="id4"/>
	</template>
	<template>
		<name>Pond</name>
		<declaration>// We assume as pond geometry an inverted pyramid with square base, where the base is the surface of the permanent water level. 
// H represents the height of the pyramid, L represents the area of the pyramid.
const double H = 1000000.0; // pond geometry H [cm]
const double L = 7464.5; // pond geometry L [cm], 7464.5 -&gt; 5572 m2 area

// Flow from urban catchment to pond. Eq. 2 in paper.
double Qin()
{
    return S_UC * UC_k * A_UC;
}

// Dynamics of the water level. Eqs. 4 and 5 in the paper combined.
double pond_dynamics()
{
    if (w &lt;= 0 &amp;&amp; Qin() &lt;= Qout) return 0;

    else if (w &gt;= W &amp;&amp; Qin() &gt;= Qout) return 0; 

    else return H*H/(L*L)/((w+H)*(w+H))*(Qin()-Qout);
}

// Cummulative overflow duration. Eq. 6 in the paper.
double overflow()
{
    const double epsilon = 0.1; // for numerical precision 
    if (w &gt;= W - epsilon) return 1.0;
    
    else return 0.0;
}


//.........................
// Noise functions 
//.........................

const double e = 0.1; // sensor uncertainty factor. 

// noise function - uniform distribution (from Martijn) 
double uniform(double lower, double upper)
{
    double distance = upper - lower; 
    double sample = random(distance); 
    return lower + sample; 
}

</declaration>
		<location id="id5" x="0" y="0">
			<label kind="invariant" x="-76" y="17">w' == pond_dynamics() &amp;&amp;
o' == overflow()</label>
			<label kind="exponentialrate" x="-25" y="-8">1</label>
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>Controller</name>
		<declaration>const int P = h; // control switching period [min]
const double Qomax = 60.0 * 95000.0; // max outflow [cm3/min], 95000 cm3/s = 95 l/s
const int C = 3; // number of control modes
const double Qoutv[C] = {(1.0/6.0)*Qomax, (2.0/3.0)*Qomax, (3.0/3.0)*Qomax}; // outflow modes
clock x = 0.0; // control switching clock

</declaration>
		<location id="id6" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=(P+1)</label>
		</location>
		<location id="id7" x="-178" y="0">
			<urgent/>
		</location>
		<location id="id8" x="136" y="0">
			<urgent/>
		</location>
		<init ref="id7"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="select" x="17" y="-102">i:int[0,C-1]</label>
			<label kind="assignment" x="0" y="-85">x=0, Qout=Qoutv[i]</label>
			<nail x="136" y="-59"/>
			<nail x="0" y="-59"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="59" y="0">x&gt;=P</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-127" y="-17">i:int[0,C-1]</label>
			<label kind="assignment" x="-144" y="0">Qout=Qoutv[i]</label>
		</transition>
	</template>
	<template>
		<name>SensorGaussian</name>
		<parameter>const double std</parameter>
		<declaration>//..............................
// Esther 
//..............................

clock x = 0.0; // control switching clock

const int S = 10*m; // sensor reading interval [min] - 10 min applied


const int P = 5; // size of sensor reading for partial observation 
const int I = 6*10*24*3+500; // size of sensor reading for full observation 

// The value from senser will be put to list. 
double po_list[P];
double po=0.0;
double posum=0.0;
double full_list [I];

int [0,P] len; 
int [0,I] len2; 


//........................
// sensor reading queue
//........................

// Remove the front element of the po_list. It can hold only 5 elements. 
void delist(double element)
{
    int i = 0; 
    len -= 1; 
    while (i&lt;P-1) 
    {
        po_list[i] = po_list[i+1];
        i++;
    }
    po_list[i] = element;
 
   
}

// Put a new element at the end of the list. 
void enlist(double element)
{
    if (len &lt; P)
    {po_list[len] = element;
    }
    else
    {delist(element);}
}

// Impelmentation for Full reading sensor  
void fulllist(double element)
{
    full_list[len2] = element;
}


// average of enlist 
double avelist()
{
   int i = 0; 
   po = 0.0; 
   posum = 0.0; 
   //len -= 1; 
   if (len2 &lt; P-1){
    while (i &lt; P-1) {
        posum = posum + po_list[i];
        i++;          
        }po = posum/(len+1);
    }

    else{    
        while (i &lt; P) {
            posum = posum + po_list[i];
            i++;
        }
    po = posum/5;
    }    
    return po; 
}

//.........................
// Noise functions 
//.........................

//const double e = 0.1; // sensor uncertainty factor. 

double a = 0.0; // sensor uncertainty factor.


// noise function - Gaussian distribution  
double gau(double std)
{
    double sample = random_normal(0, std); 
    return sample; 
}

</declaration>
		<location id="id12" x="-433" y="-161">
			<name x="-467" y="-212">SensorOff</name>
			<urgent/>
		</location>
		<location id="id13" x="-229" y="-161">
			<name x="-255" y="-212">SensorOn</name>
			<label kind="invariant" x="-263" y="-195">x &lt;= (S+1)</label>
		</location>
		<location id="id14" x="-51" y="-161">
			<name x="-59" y="-212">Detect</name>
			<committed/>
		</location>
		<init ref="id12"/>
		<transition id="id15" controllable="false">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="assignment" x="-212" y="-93">x = 0, 
sensor_w = w + gau(std)</label>
			<nail x="-51" y="-93"/>
			<nail x="-229" y="-93"/>
		</transition>
		<transition id="id16" controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-161" y="-187">x &gt;= S</label>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="-357" y="-187">x = 0</label>
		</transition>
	</template>
	<template>
		<name>Cost</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id18" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">c' == 100*pow(w/W,20) + (1-(w/W))</label>
		</location>
		<init ref="id18"/>
	</template>
	<template>
		<name>SensorCost</name>
		<declaration>// This cost function from Martijn's ADHS 21 paper. 
// This cost function considers Partical sedimentation, but no overflow. </declaration>
		<location id="id19" x="-246" y="-17">
			<label kind="invariant" x="-365" y="0">sensor_c' == 100*pow(sensor_w/W,20) + (1-(sensor_w/W))</label>
		</location>
		<init ref="id19"/>
	</template>
	<system>
Sensor = SensorGaussian(0.0); // If you want to change std, change the value. 
//ga01 = SensorGaussian(5.0, 1);
//ga02 = SensorGaussian(10.0, 2);
//ga03 = SensorGaussian(15.0, 3);

//uni = SensorUniform(0.0); // If you want to change error range, change the value. 
//uni01 = SensorGaussian(1.0, 1);
//uni02 = SensorGaussian(2.0, 2);
//uni03 = SensorGaussian(3.0, 3);

system Pond, Rain, Controller, UrbanCatchment, Cost, Sensor;
</system>
	<queries>
		<option key="--total-runs" value="1000"/>
		<option key="--discretization" value="0.1"/>
		<option key="--max-iterations" value="100"/>
		<option key="--good-runs" value="1000"/>
		<option key="--eval-runs" value="10"/>
		<option key="--runs-pr-state" value="1000"/>
		<query>
			<formula>// Optimal control (synthesis with Gaussian noise; std = 0.0)</formula>
			<comment>purpose: the result of observing this sensor_w or w should be same. </comment>
		</query>
		<query>
			<formula>strategy opt_po_std0 = minE (c) [&lt;=72*h] {} -&gt; {rain, sensor_w}: &lt;&gt; (t==72*h)</formula>
			<comment>**Learning parameters: 
successful runs: 1000 
maximum runs: 1000 
good runs: 1000 
runs to evaluate: 10 
total maximal number of iternations: 100
limitation iterations: 5

**Statistical parameters: 
Discretization step for hybrid systems:  0.1
</comment>
		</query>
		<query>
			<formula>saveStrategy("C:\Users\sj81ko\Desktop\Project\paper_partial observation\uppaal_po\strategy_po_std0_100cost_1000runs_1", opt_po_std0)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=72*h;10] {w} under opt_po_std0</formula>
			<comment>w: water level height 
This query shows simulation results of water level. </comment>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:c) under opt_po_std0</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=72*h; 1000] (max:o) under opt_po_std0</formula>
			<comment/>
		</query>
	</queries>
</nta>
